---1--- Students and Their Enrollments
select s.id, concat(s.first_name,' ',s.last_name) as student, e.course_id
from enrollments e, students s
where s.id=e.student_id
group by s.id, e.course_id
order by student
---2--- List of all students and the courses they are currently enrolled in, including course details---
select s.id, 
	   concat(s.first_name,' ',s.last_name) as student, 
	   e.course_id, 
	   c.code, c.course_title, c.ects, c.faculty_id
from enrollments e, students s, courses c
where s.id=e.student_id
and e.course_id=c.id
group by s.id, e.course_id, c.id
order by student
---3--- The students who do not have assigned advisors
select * 
from students 
where advisor_id is null
---4--- The student(s) with the highest GPA and their academic records
select s.*, ts.gpa
from (select max(gpa) as max_gpa, faculty_id 
	  from transcripts 
	  group by faculty_id) highest,
	  transcripts ts, students s
where highest.max_gpa=ts.gpa
and highest.faculty_id=ts.faculty_id
and ts.student_id=s.id
order by s.faculty_id asc
---5--- Calculating the average GPA for students in each major
select  ts.faculty_id ,f.faculty_name,ROUND(cast(avg(gpa) as decimal),2) as avg_gpa
	  from transcripts ts 
	  join faculty f 
	  on ts.faculty_id=f.id
	  group by ts.faculty_id,f.faculty_name
	  order by ts.faculty_id
---6--- Determining which departments offer the most courses by counting the number of courses offered in each department
select name,count(*) as courses
from departments
group by name
order by courses desc
---7--- Faculty advisors along with the students they advise
select a.name as advisor, 
	   concat(s.first_name,' ',s.last_name) as student,
	   f.faculty_name as faculty
from advisors a
join faculty f
on a.faculty_id=f.id
join students s
on s.advisor_id=a.id
---8--- student groups with the most members and list the group names and member counts
select sg.organization_name, 
	   count(s.joinedorganizations) as member_nums
from student_groups sg
join students s
on sg.id=s.joinedorganizations
group by sg.organization_name 
order by member_nums desc
---9---  the occupancy rate of the university's student housing facilities
select type_building,
	   count(*) as students_occupied,
	   sum(available_rooms) as available_rooms,
	   round((count(*)::float/sum(available_rooms) )*100, 2)  as rate
	   --count(*)::float/sum(available_rooms) as rate
from housing 
group by type_building,available_rooms
---10---  the average cost of meal plans for different student groups
select s.group_type,
	   round(avg(oneday_cost_kzt),2) as oneday_meal,
	   round(avg(week_cost_kzt),2) as week_meal,
	   round(avg(month_cost_kzt),2) as month_meal
from students s
join meal_plans m
on s.id=m.student_id
group by group_type
---11--- the total tuition revenue generated by each academic department
select d.name,
	   sum(sf.cost_kzt) as revenue
from departments d
join student_fees sf
on sf.faculty_id=d.faculty_id
group by d.name,d.faculty_id
order by revenue desc
---12---  the number of available library resources and the number checked out by students
select count(*) as overall,
	   (count(*) - (select count(*) 
					from library 
					where student_id is null)) as checked_out,
	   (select count(*) 
					from library 
					where student_id is null) as available_resources
from library
---13---  the number of student visits to health services and their average visit duration
select count(student_id) as total,
	   round(avg(appointment_duration),2) as avg_visit_duration_min
from health_services
---14--- student achievements (awards, honors) and group them by the student's department
select sa.award, d.name "department"
from student_achievements sa,
	 students s,
	 departments d,
	 faculty f
where sa.student_id=s.id
and d.faculty_id=f.id
and s.faculty_id=d.faculty_id
group by d.name, sa.award
order by d.name
---15---  the percentage of students who have participated in internships
select round(cast(count(distinct i.student_id)::float/count(distinct s.id) as numeric)*100,2) as participation_percentage
from internships i,students s
---15.2---second way---
select count(distinct i.student_id) as total_interns, 
	   count(distinct s.id) as total_students,
	   round(cast((select count(distinct student_id) from internships)
	   ::float/
       (select count(id) from students ) as numeric)*100,2) as percentage 
from internships i,students s
---16--- the countries where students have studied abroad and the number of students in each country
select country "Country",
	   count(*) "Num of students"
from study_abroad
group by country
order by "Num of students" desc
---17--- the upcoming campus events and their details, sorted by date
select se.event_name,
	   sg.organization_name,
	   se.event_type,
	   se.event_date,
	   se.allowed_students
from student_events se
join student_groups sg
on se.organization_id=sg.id
order by se.event_date asc
---18--- departments which produce the most employed alumni
select d.name "Department",
	   sum(case 
		   when employed = 'True' then 1 
		   else 0 
		   end) "Employed alumni"	
from alumni a
join departments d
on a.faculty_id=d.faculty_id
group by d.name
order by "Employed alumni" desc
---19--- faculty members who have expertise in specific research areas, based on their academic records
select s.id,
	   concat(s.first_name,' ',s.last_name) "Student",
	   f.faculty_name,
	   t.research_article
from transcripts t
join students s
on s.id=t.student_id
join faculty f
on f.id=s.faculty_id
where research_article is not null
---20--- the historical enrollment data to identify trends in student enrollment over the past few years
select extract (year from enrollment_date) "Year",
	  to_char(enrollment_date, 'Month') "Month",
	   count(student_id) "Students num"
from enrollments
group by "Year", "Month"
order by "Year","Month" DESC
---21--- Verify if students enrolling in advanced courses meet the prerequisites by checking their transcript records
select s.id "Student ID",
	   concat(s.first_name,' ',s.last_name) "Student",
	   c.course_title "Course", 
	   c.id "Course ID",
	   c.pre_course_id "Prerequisite"
from students s
join enrollments e
on s.id=e.student_id
join courses c
on c.pre_course_id=e.course_id
---22--- students with outstanding fees, including the total amount owed
select student_id, 
	   sum(case when status='paid' then cost_kzt 
		   else 0 end) "Repaid",
	   sum(case when status='not paid' then cost_kzt 
		   else 0 end) "Overall debt"
from student_fees
group by student_id
---23--- instructors who are teaching multiple courses in the same term and list the courses they are teaching
select s.name,
	   c.course_title,
	   c.ects,
	   c.term
from staff s
join courses c
on s.staff_id=c.instructor_id
where (s.staff_id,c.term)
in (select instructor_id, term 
	from courses
   group by instructor_id, term
   having count(id)>1)
order by s.name
---24--- statistics on student diversity, such as the distribution of gender, ethnicity, or nationality
select age,
	   count(*) "Students amount"
from students
group by age order by age 

select gender, 
	   count(*) "Students amount"
from students
group by gender 

select nationality, 
	   count(*) "Students amount"
from students
group by nationality
---25---  the most popular combinations of courses (sets of courses taken together) among students
select e1.course_id "First Course",
	   e2.course_id "Second Course"
from enrollments e1
join enrollments e2
on e1.course_id>e2.course_id
and e1.student_id=e2.student_id
group by e1.course_id,e2.course_id
having count(*)>1
---26--- the academic performance (GPA) of students based on their faculty advisorsstudent groups that have members from a wide range of majors, promoting interdisciplinary collaboration
select a.name,
	 round(cast(avg(t.gpa) as decimal),2) "Avg gpa"
from transcripts t
join students s
on t.student_id=s.id
join advisors a
on a.id=s.advisor_id
group by a.name
---27--- student groups that have members from a wide range of majors, promoting interdisciplinary collaboration
select sg.organization_name "Organization name", 
	   count(s.faculty_id) "Different faculties"
from students s
join student_groups sg
on s.joinedorganizations=sg.id
group by sg.organization_name
having (count(distinct s.faculty_id))>1
---28--- courses with consistently high enrollment, helping with scheduling and resource allocation
select c.course_title,
	   count(e.course_id) "Total course"
from enrollments e
join courses c
on e.course_id=c.id
group by c.course_title
having count(e.course_id)>=4
---29--- the average time it takes students to graduate, considering their major and any changes in degree programs
select degree "Degree",
	   round(cast(AVG(DATE_PART('year', AGE(graduatedyear,admissionyear))) 
				  as decimal),2) "AVG Years",
	   round(cast(AVG(DATE_PART('months', AGE(graduatedyear,admissionyear))) 
				  as decimal),2) "AVG Months",
	   round(cast(AVG(DATE_PART('days', AGE(graduatedyear,admissionyear))) 
				  as decimal),2) "AVG Days"
from alumni
group by degree
---30--- Determine if students who complete internships have a higher graduation rate compared to those who do not
select sum(case 
		   when employed='true' 
		   and internship_id is not null then 1 else 0 end) "Employed Interns",
	   (sum(case 
		   when employed='true' 
		   and internship_id is not null 
		   then 1 else 0 end)::float/count(*))*100 "Employed Interns %",
	   sum(case 
		   when employed='true' 
		   and internship_id is null 
		   then 1 else 0 end)	"Employed not Intern",
	   (sum(case 
		   when employed='true' 
		   and internship_id is null 
		   then 1 else 0 end)::float/count(*))*100 "Employed not Interns %",
	   count(*) "Total"
from alumni
---------------------------------
